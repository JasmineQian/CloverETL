<?xml version="1.0" encoding="UTF-8"?>
<Graph author="jasqia" created="Tue Mar 06 14:08:52 CST 2018" guiVersion="4.5.1" id="1520319626565" licenseCode="CLP1DACXIO36442151BY" name="EMAIL_ATTACH_FILE" nature="jobflow" showComponentDetails="true">
<Global>
<Metadata id="Metadata0" previewAttachmentCharset="UTF-8">
<Record fieldDelimiter="|" name="RejectPath" previewAttachmentCharset="UTF-8" recordDelimiter="\n" type="delimited">
<Field name="CEL_BATCH_TS" type="string"/>
<Field name="RejectPath" type="string"/>
</Record>
</Metadata>
<Connection dbConfig="${CONN_DIR}/NTGETL02_ETL_TR_JASMINEQIAN.cfg" id="JDBC0" type="JDBC"/>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
<GraphParameter name="Rej_SFTP_PATH" value="${DATATMP_DIR}/"/>
<GraphParameter name="Summary_Excel" value="wwww#.xlsx"/>
<GraphParameter name="TableName" value="JJJJJJJJJJJ"/>
<GraphParameter name="source_PATH">
<attr name="dynamicValue"><![CDATA[//#CTL2

function string getValue() {
	return "data_tmp/*.TReject";
}
]]></attr>
</GraphParameter>
<GraphParameter name="Email_attach" value="${GRAPH_DIR}/email_attach"/>
<GraphParameter name="graph_URL" value="${GRAPH_DIR}/1.grf"/>
<GraphParameter name="file_batch_ts" value="20171016153132"/>
</GraphParameters>
<Dictionary/>
</Global>
<Phase number="1">
<Node guiName="CopyFiles2BAK" guiX="559" guiY="232" id="CopyFiles2BAK" sourceURL="${DATATMP_DIR}/*.*" targetURL="sftp://asl785:8YK%2Cyqfyd5@sftp.acxiom.com.cn:22//IN/ETL_TR_JASMINEQIAN/BAK/" type="COPY_FILES">
<attr name="inputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.sourceURL = $in.0.RejectPath;
	$out.0.targetURL = replace (getParamValue("Rej_SFTP_PATH"),'rej_sftp_path:','');

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node dbConnection="JDBC0" guiName="DBInputTable" guiX="114" guiY="196" id="DBINPUT_TABLE" type="DB_INPUT_TABLE">
<attr name="sqlQuery"><![CDATA[SELECT  CEL_BATCH_TS,CEL_ATTRIB7 as REJECTPATH
FROM CLOVER_ETL_LIST LIST 
JOIN (SELECT CES_ID FROM CLOVER_ETL_TASK JOIN CLOVER_ETL_STEP ON CET_ID=CES_CET_ID) STEP ON LIST.CEL_CES_ID=STEP.CES_ID]]></attr>
</Node>
<Node guiName="ExtHashJoin" guiX="349" guiY="232" id="EXT_HASH_JOIN" joinKey="$CEL_BATCH_TS=$CEL_BATCH_TS" joinType="leftOuter" type="EXT_HASH_JOIN">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.CEL_BATCH_TS = $in.0.CEL_BATCH_TS;
	$out.0.RejectPath = $in.0.RejectPath;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="GetJobInput" guiX="114" guiY="298" id="GET_JOB_INPUT" type="GET_JOB_INPUT">
<attr name="mapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.CEL_BATCH_TS = getParamValue("file_batch_ts");
	$out.0.RejectPath = getParamValue("Rej_SFTP_PATH");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Edge debugMode="true" fromNode="DBINPUT_TABLE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (driver)" metadata="Metadata0" outPort="Port 0 (out)" toNode="EXT_HASH_JOIN:0"/>
<Edge debugMode="true" fromNode="EXT_HASH_JOIN:0" guiBendpoints="" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="CopyFiles2BAK:0"/>
<Edge debugMode="true" fromNode="GET_JOB_INPUT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 1 (slave)" metadata="Metadata0" outPort="Port 0 (out)" toNode="EXT_HASH_JOIN:1"/>
</Phase>
<Phase number="2">
<Node guiName="ExecuteGraph" guiX="121" guiY="416" id="EXECUTE_GRAPH" jobURL="${GRAPH_DIR}/Email.grf" type="EXECUTE_GRAPH">
<attr name="inputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.1.file_batch_ts = getParamValue("file_batch_ts");
	$out.1.excel_filename = getParamValue("Email_attach")+'/'+getParamValue("Summary_Excel");
	$out.0.jobURL = getParamValue("graph_URL");
	$out.1.table_name = getParamValue("TableName");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
</Phase>
</Graph>
